#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros --load-system draw-something -- $0 "$@"
|#

(defconstant hashes-filename "tx-hashes")

(defconstant specs
  (with-open-file (in hashes-filename)
    (let ((*read-eval* nil))
      (read in)))
  "A list of the token IDs, and their associater 64-char hexadecimal string
   hashes to turn into skeletons")

(defconstant edition-size (length specs)
  "How many drawings to produce.")

;; Units are mm

(defparameter *pen-params*
  (make-instance 'draw-something::<pen-parameters>
                 :move-step          0.35  ;; 1.3px ;;1.0
                 :distance           1.4   ;; 5.2 px
                 :distance-tolerance 0.2   ;; 0.7 px
                 :turn-step          0.01  ;;0.1
                 :drift-probability  0.0
                 :drift-range        0.0)) ;;0.1

;; 17 x 14" in mm = 432 x 356 mm
;; Axidraw V3A3 travel in mm = 430 x 297 mm
;; We need a square that fits, so it has to be 297 x 297 mm
;; This amounts to a 297mm column, with a 297mm square in the vertical center
;; of the page height (not the plotter y travel distance).

;; This was 297 . 356 but that rendered weirdly for the PNG,
;; So we now handle the vertical offset in the column using the AxiDraw CLI.
(defparameter +page-size+ '(297 . 297))
(defparameter +skeleton-inset+ (* 2
                                  (draw-something::pen-distance *pen-params*)))
;; https://github.com/evil-mad/axidraw/blob/master/inkscape%20driver/axidraw_conf.py#L145
;; The drawing is square, even although the paper is rectangular
(defparameter +drawing-size+ (cons (- 297 +skeleton-inset+)
                                   (- 297 +skeleton-inset+)))
(defparameter +drawing-x+ (/ (- (car +page-size+) (car +drawing-size+)) 2.0))
(defparameter +drawing-y+ (/ (- (cdr +page-size+) (cdr +drawing-size+)) 2.0))

(defun draw-something (pathspec hash randseed)
  "Make the drawing data structures and create the image."
  (draw-something::advisory-message "Starting draw-something.~%")
  (draw-something::random-init randseed)
  (let* ((drawing-bounds (make-instance 'draw-something::<rectangle>
                                        :x +drawing-x+
                                        :y +drawing-y+
                                        :width (car +drawing-size+)
                                        :height (cdr +drawing-size+)))
         (points (draw-something::hash-to-points
                  hash
                  (draw-something::x drawing-bounds)
                  (draw-something::y drawing-bounds)
                  (draw-something::width drawing-bounds)
                  (draw-something::height drawing-bounds)))
         (form (draw-something::make-form-from-points points)))
    (draw-something::draw-form form *pen-params*)
    (draw-something::advisory-message "Finished drawing.~%")
    (let ((filepath
           (draw-something::write-svg-form
            form
            (make-instance draw-something::'<rectangle>
                           :x 0
                           :y 0
                           :width (car +page-size+)
                           :height (cdr +page-size+))
            pathspec)))
      (draw-something::advisory-message "Finished draw-something.~%")
      filepath)))

(defun main ()
  (ensure-directories-exist "./drawings/")
  (dolist (spec specs)
    (let ((edition-number (car spec))
          (hash (cdr spec)))
      (draw-something
       (format nil "drawings/~a.svg" hash)
       hash
       edition-number)))
  "Done.")
